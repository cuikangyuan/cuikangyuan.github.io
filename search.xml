<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[数据结构学习笔记-21]]></title>
      <url>http://cuikangyuan.github.io/2016/02/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-21/</url>
      <content type="html"><![CDATA[<h2 id="u516B_u7687_u540E"><a href="#u516B_u7687_u540E" class="headerlink" title="八皇后"></a>八皇后</h2><a id="more"></a>     
<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int count = 0;

int noDanger(int row, int column, int     (*chess)[8] )
{
    int i, k, flag1=0, flag2=0, flag3=0, flag4=0, flag5=0;

    //判断列方向
    for( i=0; i&lt;8; i++)
    {
        if( *(*(chess+i)+column) != 0)
        {
            flag1 = 1;
            break;
        }
    }

    //判断左上方
    for( i=row, k=column; i&gt;=0 &amp;&amp; k&gt;=0; i--, k--)
    {
        if( *(*(chess+i)+k) != 0)
        {
            flag2 = 1;
            break;
        }
    }

    //判断右下方
    for( i=row, k=column; i&lt;8 &amp;&amp; k&lt;8; i++, k++)
    {
        if( *(*(chess+i)+k) != 0)
        {
            flag3 = 1;
            break;
        }
    }
    //判断右上方
    for( i=row, k=column; i&gt;=0 &amp;&amp; k&lt;8; i--, k++)
    {
        if( *(*(chess+i)+k) != 0)
        {
            flag4 = 1;
            break;
        }
    }
    //判断左下方
    for( i=row, k=column; i&lt;8 &amp;&amp; k&gt;=0; i++, k--)
    {
        if( *(*(chess+i)+k) != 0)
        {
            flag5 = 1;
            break;
        }
    }

    if( flag1 || flag2 || flag3 || flag4 || flag5)
    {
        return 0;
    }
    else
    {
        return 1;
    }
}

//row表示起始行, column表示列数, (*chess)[8]表示指向棋盘每一行的指针
void EightQueen( int row, int column, int     (*chess)[8])
{
     int chess2[8][8], i, j;

     for( i=0; i&lt;8; i++)
     {
         for(j=0; j&lt;8; j++)
         {
             chess2[i][j] = chess[i][j];
         }
     }

     if( 8 == row)
     {
         printf(&quot;第 %d 种\n&quot;, count+1);
         for( i=0; i&lt;8; i++)
         {
             for( j=0; j&lt;8; j++)
             {
                printf(&quot;%d &quot;, *(*(chess2+i)+j));
             }
             printf(&quot;\n&quot;);
         }
         printf(&quot;\n&quot;);
         count++;
     }
     else
     {

         for( j=0; j&lt;column; j++)
         {
             //判断位置是否可放置
             if( noDanger( row, j, chess ))
             {
                for( i=0; i&lt;8; i++)
                {
                    *(*(chess2+row)+i) = 0;
                }

                *(*(chess2+row)+j) = 1;

                EightQueen( row+1, column, chess2 );
             }
         }
     }
}


int main()
{
    int chess[8][8], i, j;

    for( i=0; i&lt;8; i++ )
    {
        for( j=0; j&lt;8; j++)
        {
            chess[i][j] = 0;
        }
    }

    EightQueen( 0, 8, chess);

    printf(&quot;总共 %d 种解决方法\n\n&quot;, count);

    return 0;
}
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构学习笔记-20]]></title>
      <url>http://cuikangyuan.github.io/2016/02/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-20/</url>
      <content type="html"><![CDATA[<h2 id="u6C49_u8BFA_u5854"><a href="#u6C49_u8BFA_u5854" class="headerlink" title="汉诺塔"></a>汉诺塔</h2><a id="more"></a>     
<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

void move(int n, char x, char y, char z)
{
    if( 1 == n )
    {
        printf(&quot;%c---&gt;%c\n&quot;, x, z);
    }
    else
    {
        move(n-1, x, z, y); //n-1个盘子从x借助z移动到y
        printf(&quot;%c---&gt;%c\n&quot;, x, z); //将第n个盘子从x 移动到z
        move(n-1, y, x, z); //n-1个盘子从y借助x移动到z
    }
}

int main()
{
    int n;
    scanf(&quot;%d&quot;, &amp;n);
    move(n, &apos;X&apos;, &apos;Y&apos;, &apos;Z&apos;);
    return 0;
}
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构学习笔记-19]]></title>
      <url>http://cuikangyuan.github.io/2016/02/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-19/</url>
      <content type="html"><![CDATA[<h2 id="u961F_u5217_u7684_u987A_u5E8F_u5B58_u50A8_u7ED3_u6784"><a href="#u961F_u5217_u7684_u987A_u5E8F_u5B58_u50A8_u7ED3_u6784" class="headerlink" title="队列的顺序存储结构"></a>队列的顺序存储结构</h2><a id="more"></a>     
<pre><code>#define MAXSIZE 100

typedef struct
{
    ElemType *base;

    int front;
    int rear;
}cycleQueue;

initQueue(cycleQueue *q)
{
    q-&gt;base = (ElemType *)malloc(MAXSIZE * sizeof(ElemType));

    if( !q-&gt;base)
        exit(0);
    q-&gt;front = q-&gt;rear = 0;
}

insertQueue(cycleQueue *q, ElemType e)
{
    if( (q-&gt;rear+1)%MAXSIZE == q-&gt;front)
        return;
    q-&gt;base[q-&gt;rear]= e;
    q-&gt;rear = (q-&gt;rear+1) % MAXSIZE;
}

deleteQueue(cycleQueue *q, ElemType *e)
{
    if( q-&gt;front == q-&gt;rear)
        return;
    *e = q-&gt;base[q-&gt;front];
    q-&gt;front = (q-&gt;front+1) % MAXSIZE;
}
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构学习笔记-18]]></title>
      <url>http://cuikangyuan.github.io/2016/02/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-18/</url>
      <content type="html"><![CDATA[<h2 id="u961F_u5217_u7684_u94FE_u5F0F_u5B58_u50A8_u7ED3_u6784"><a href="#u961F_u5217_u7684_u94FE_u5F0F_u5B58_u50A8_u7ED3_u6784" class="headerlink" title="队列的链式存储结构"></a>队列的链式存储结构</h2><a id="more"></a>     
<pre><code>typedef struct QNode {
    ElemType data;
    struct QNode *next;
} QNode, *QueuePrt;

typedef struct {
    QueuePrt front, rear;//队头尾指针
}LinkQueue;

initQueue(LinkQueue *q)
{
    q-&gt;front = q-&gt;rear = (QueuePrt)malloc(sizeof(QNode));
    if( !q-&gt;front)
        exit(0);
    q-&gt;front-&gt;next = NULL;
}

insertQueue(LinkQueue *q, ElemType e)
{
    QueuePrt p;
    p = (QueuePrt)malloc(sizeof(QNode));

    if( p == NULL)
        exit(0);
    p-&gt;data = e;
    p-&gt;next = NULL;
    q-&gt;rear-&gt;next = p;
    q-&gt;rear = p;
}

DeleteQueue(LinkQueue *q, ElemType *e)
{
    QueuePrt p;
    if( q-&gt;front == q-&gt;rear )
        return;
    p = q-&gt;front-&gt;next;
    *e = p-&gt;data;
    q-&gt;front-&gt;next = p-&gt;next;

    if( q-&gt;rear == p)
        q-&gt;rear = q-&gt;front;

    free(p);

}

DestroyQueue(LinkQueue *q)
{
    while( q-&gt;front )
    {
        q-&gt;rear = q-&gt;front-&gt;next;
        free( q-&gt;front );
        q-&gt;front = q-&gt;rear;
    }
}
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构学习笔记-17]]></title>
      <url>http://cuikangyuan.github.io/2016/02/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-17/</url>
      <content type="html"><![CDATA[<h2 id="u4E2D_u7F00_u8BA1_u7B97_u8868_u8FBE_u5F0F_u8F6C_u5316_u4E3A_u540E_u7F00_u8BA1_u7B97_u8868_u8FBE_u5F0F"><a href="#u4E2D_u7F00_u8BA1_u7B97_u8868_u8FBE_u5F0F_u8F6C_u5316_u4E3A_u540E_u7F00_u8BA1_u7B97_u8868_u8FBE_u5F0F" class="headerlink" title="中缀计算表达式转化为后缀计算表达式"></a>中缀计算表达式转化为后缀计算表达式</h2><a id="more"></a>     
<pre><code>#include &lt;stdio.h&gt;
#include &lt;ctype.h&gt;
#include &lt;stdlib.h&gt;

#define STACK_INIT_SIZE 20
#define STACKINCREMENT 10
#define MAXBUFFER 10

typedef char ElemType;
typedef struct
{
    ElemType *base;
    ElemType *top;
    int stackSize;
}sqStack;

InitStack(sqStack *s)
{
    s-&gt;base = (ElemType *)malloc(STACK_INIT_SIZE * sizeof(ElemType));

    if( !s-&gt;base)
        exit(0);

    s-&gt;top = s-&gt;base;
    s-&gt;stackSize = STACK_INIT_SIZE;

}

Push(sqStack *s, ElemType e)
{
    if( s-&gt;top - s-&gt;base &gt;= s-&gt;stackSize)
    {
        s-&gt;base = (ElemType *)realloc(s-&gt;base, (s-&gt;stackSize + STACKINCREMENT)*sizeof(ElemType));
        if( !s-&gt;base )
        exit(0);

        s-&gt;top = s-&gt;base + s-&gt;stackSize;
        s-&gt;stackSize = s-&gt;stackSize + STACKINCREMENT;

    }

    *(s-&gt;top) = e;
    s-&gt;top++;
}

Pop(sqStack *s, ElemType *e)
{
    if(s-&gt;top == s-&gt;base)
        return;

    *e = *--(s-&gt;top);
}

int StackLen(sqStack *s)
{
    return (s-&gt;top - s-&gt;base);
}

int main()
{
    sqStack s;
    char c, e;

    InitStack(&amp;s);

    printf(&quot;请输入中缀表达式，以#为结束符: \n&quot;);
    scanf(&quot;%c&quot;, &amp;c);

    while( c != &apos;#&apos;)
    {
        while( isdigit(c) )
        {
            printf(&quot;%c&quot;, c);
            scanf(&quot;%c&quot;, &amp;c);
            if( !isdigit(c) )
            {
                printf(&quot; &quot;);
            }
        }
        if( &apos;)&apos; == c )
        {
            Pop(&amp;s, &amp;e);
            while( &apos;(&apos; != e)
            {
                printf(&quot;%c &quot;, e);
                Pop(&amp;s, &amp;e);
            }
        }
        else if( &apos;+&apos;==c || &apos;-&apos;==c)
        {
            if ( !StackLen(&amp;s))
            {
                Push(&amp;s, c);
            }
            else
            {
                do
                {
                    Pop(&amp;s, &amp;e);
                    if( &apos;(&apos; == e)
                    {
                        Push(&amp;s, e);
                    }
                    else
                    {
                        printf(&quot;%c &quot;, e);
                    }
                }while( StackLen(&amp;s) &amp;&amp; &apos;(&apos; != e );

            }
            Push(&amp;s, c);

        }
        else if( &apos;*&apos;==c || &apos;/&apos;==c || &apos;(&apos;==c )
        {
            Push(&amp;s, c);
        }
        else if( &apos;#&apos;==c)
        {
            break;
        }
        else
        {
            printf(&quot;\n出错，输入错误&quot;);
            return -1;
        }
        scanf(&quot;%c&quot;, &amp;c);
    }

    while( StackLen(&amp;s))
    {
        Pop(&amp;s, &amp;e);
        printf(&quot;%c &quot;, e);
    }

    return 0;
}
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构学习笔记-16]]></title>
      <url>http://cuikangyuan.github.io/2016/02/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-16/</url>
      <content type="html"><![CDATA[<h2 id="u9006_u6CE2_u5170_u8FD0_u7B97"><a href="#u9006_u6CE2_u5170_u8FD0_u7B97" class="headerlink" title="逆波兰运算"></a>逆波兰运算</h2><a id="more"></a>     
<pre><code>#include &lt;stdio.h&gt;
#include &lt;ctype.h&gt;
#include &lt;stdlib.h&gt;

#define STACK_INIT_SIZE 20
#define STACKINCREMENT 10
#define MAXBUFFER 10

typedef double ElemType;
typedef struct
{
    ElemType *base;
    ElemType *top;
    int stackSize;
}sqStack;

InitStack(sqStack *s)
{
    s-&gt;base = (ElemType *)malloc(STACK_INIT_SIZE * sizeof(ElemType));

    if( !s-&gt;base)
        exit(0);

    s-&gt;top = s-&gt;base;
    s-&gt;stackSize = STACK_INIT_SIZE;

}

Push(sqStack *s, ElemType e)
{    
    if( s-&gt;top - s-&gt;base &gt;= s-&gt;stackSize)
    {
        s-&gt;base = (ElemType *)realloc(s-&gt;base, (s-&gt;stackSize + STACKINCREMENT)*sizeof(ElemType));
        if( !s-&gt;base )
            exit(0);

        s-&gt;top = s-&gt;base + s-&gt;stackSize;
        s-&gt;stackSize = s-&gt;stackSize + STACKINCREMENT;

    }

    *(s-&gt;top) = e;
    s-&gt;top++;
}

Pop(sqStack *s, ElemType *e)
{
    if(s-&gt;top == s-&gt;base)
           return;

    *e = *--(s-&gt;top);
}

int StackLen(sqStack *s)
{
    return (s-&gt;top - s-&gt;base);
}

int main()
{
    sqStack s;
    char c;
    double d, e;
    char str[MAXBUFFER];
    int i = 0;


    InitStack(&amp;s);

    printf(&quot;请按逆波兰表达式输入待计算数据，以空格为间隔符，#为结束符: \n&quot;);
    scanf(&quot;%c&quot;, &amp;c);

    while( c != &apos;#&apos;)
    {
        while( isdigit(c) || c==&apos;.&apos;)
        {
            str[i++] = c;
            str[i] = &apos;\0&apos;;
            if( i &gt;= 10)
            {
                printf(&quot;输入的单个数据过大! \n&quot;);
                return -1;
            }
            scanf(&quot;%c&quot;, &amp;c);
            if( c == &apos; &apos;)
            {
                d = atof(str);
                Push(&amp;s, d);
                i = 0;
                break;
               }
        }

        switch( c )
        {
            case &apos;+&apos;:
                Pop(&amp;s, &amp;d);
                Pop(&amp;s, &amp;e);
                Push(&amp;s, d + e);
                break;
            case &apos;-&apos;:
                Pop(&amp;s, &amp;d);
                Pop(&amp;s, &amp;e);
                Push(&amp;s, e - d);
                break;
            case &apos;*&apos;:
                Pop(&amp;s, &amp;d);
                Pop(&amp;s, &amp;e);
                Push(&amp;s, d*e);
                break;
            case &apos;/&apos;:
                Pop(&amp;s, &amp;d);
                Pop(&amp;s, &amp;e);
                if(d != 0)
                {
                    Push(&amp;s, e/d);
                }
                else
                {
                    printf(&quot;\n除数为零!\n&quot;);
                    return -1;
                }
                break;
        }

        scanf(&quot;%c&quot;, &amp;c);
    }

    Pop(&amp;s, &amp;d);
    printf(&quot;最终的计算结果是%f\n&quot;, d);
    return 0;
}
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构学习笔记-15]]></title>
      <url>http://cuikangyuan.github.io/2016/02/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-15/</url>
      <content type="html"><![CDATA[<h2 id="u5229_u7528_u6808_u5B9E_u73B0_u4E8C_u8FDB_u5236_u8F6C_u6210_u5341_u8FDB_u5236"><a href="#u5229_u7528_u6808_u5B9E_u73B0_u4E8C_u8FDB_u5236_u8F6C_u6210_u5341_u8FDB_u5236" class="headerlink" title="利用栈实现二进制转成十进制"></a>利用栈实现二进制转成十进制</h2><a id="more"></a>     
<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;math.h&gt;

#define STACK_INIT_SIZE 20
#define STACKINCREMENT 10

typedef char ElemType;
typedef struct
{
    ElemType *base;
    ElemType *top;
    int stackSize;
}sqStack;

void InitStack(sqStack *s)
{
    s-&gt;base = (ElemType *)malloc(STACK_INIT_SIZE * sizeof    (ElemType));

    if( !s-&gt;base )
    {
        exit(0);
    }

    s-&gt;top = s-&gt;base;
    s-&gt;stackSize = STACK_INIT_SIZE;
}

void Push(sqStack *s, ElemType e)
{
    if( s-&gt;top - s-&gt;base &gt;= s-&gt;stackSize)
    {
        s-&gt;base = (ElemType *)realloc(s-&gt;base, (s-&gt;stackSize + STACKINCREMENT) * sizeof(ElemType));

           if( !s-&gt;base )
        {
            exit(0);
        }
    }
    *(s-&gt;top) = e;
    s-&gt;top++;
}

void Pop(sqStack *s, ElemType *e)
{
    if( s-&gt;top == s-&gt;base )
    {
           return;
    }

    *e = *--(s-&gt;top);
}


int StackLen(sqStack s)
{
    return (s.top - s.base);
}

int main()
{
    ElemType c;
    sqStack s;

    int len, i, sum = 0;

    InitStack(&amp;s);

    printf(&quot;请输入二进制数，输入#号表示结束! \n&quot;);
    scanf(&quot;%c&quot;, &amp;c);

    while(c != &apos;#&apos;)
    {
        Push(&amp;s, c);
        scanf(&quot;%c&quot;, &amp;c);
    }

    getchar();

    len = StackLen(s);
    printf(&quot;栈的当前容量: %d\n&quot;, len);

    for(i=0; i&lt;len; i++)
    {
        Pop(&amp;s, &amp;c);
        sum = sum + (c-48) * pow(2, i);
    }

    printf(&quot;转化为十进制数为: %d&quot;, sum);
    return 0;
}
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构学习笔记-14]]></title>
      <url>http://cuikangyuan.github.io/2016/01/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-14/</url>
      <content type="html"><![CDATA[<h2 id="u6808_u7684_u57FA_u672C_u64CD_u4F5C"><a href="#u6808_u7684_u57FA_u672C_u64CD_u4F5C" class="headerlink" title="栈的基本操作"></a>栈的基本操作</h2><a id="more"></a>     
<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

#define ElemType int
#define STACK_INIT_SIZE 100
#define STACK_INCREMENT 10

typedef struct
{
    ElemType *base;
    ElemType *top;
       int stackSize;

}sqStack;

void initStack(sqStack *s)
{
    s-&gt;base = (ElemType *)malloc(STACK_INIT_SIZE * sizeof(ElemType));
    if( !s-&gt;base )
    {
        exit(0);
    }
    s-&gt;top = s-&gt;base;
    s-&gt;stackSize = STACK_INIT_SIZE;
}

void Push(sqStack *s, ElemType e)
{
    if(s-&gt;top - s-&gt;base &gt;= s-&gt;stackSize)
    {
        s-&gt;base = realloc(s-&gt;base, (s-&gt;stackSize+STACK_INCREMENT)*sizeof(ElemType));

        if( !s-&gt;base )
        {
            exit(0);
        }

        s-&gt;top = s-&gt;base + s-&gt;stackSize;
        s-&gt;stackSize = s-&gt;stackSize+STACK_INCREMENT;
    }

    *(s-&gt;top) = e;
    s-&gt;top++;

}

ElemType * Pop(sqStack *s, ElemType *e)
{
    if(s-&gt;top == s-&gt;base)
        return;

    *e = *--(s-&gt;top);

    return e;
}

void DestroyStack(sqStack *s)
{
    int i, len;
    len = s-&gt;stackSize;

    for(i=0; i&lt;len; i++)
    {
        free(s-&gt;base);
        s-&gt;base++;
    }

    s-&gt;base = s-&gt;top = NULL;
    s-&gt;stackSize = 0;
}

void ClearStack(sqStack *s)
{
    s-&gt;top = s-&gt;base;
}


int StackLen(sqStack s)
{
    return (s.top - s.base);
}

int main()
{

    return 0;
}
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构学习笔记-13]]></title>
      <url>http://cuikangyuan.github.io/2016/01/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-13/</url>
      <content type="html"><![CDATA[<h2 id="u53CC_u5411_u5FAA_u73AF_u94FE_u8868_u5B9E_u4F8B"><a href="#u53CC_u5411_u5FAA_u73AF_u94FE_u8868_u5B9E_u4F8B" class="headerlink" title="双向循环链表实例"></a>双向循环链表实例</h2><a id="more"></a>     
<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

#define OK 1
#define ERROR 0

typedef char ElemType;
typedef int Status;

typedef struct DualNode
{
        ElemType data;
        struct DualNode *prior;
        struct DualNode *next;
}DualNode, *DuLinkList;

Status InitLisk(DuLinkList *L)
{
        DualNode *p, *q;
        int i;

        *L = (DuLinkList)malloc(sizeof(DualNode));

        if( !(*L) )
        {
            return ERROR;
        }

    (*L)-&gt;next = (*L)-&gt;prior = NULL;
    p = (*L);

    for(i=0; i&lt;26; ++i)
       {
            q = (DualNode *)malloc(sizeof(DualNode));
            if( !q )
        {
            return ERROR;
        }

        q-&gt;data = &apos;A&apos;+i;

        q-&gt;prior = p;
        q-&gt;next = p-&gt;next;
        p-&gt;next = q;

        p = q;
    }

    p-&gt;next = (*L)-&gt;next;
    (*L)-&gt;next-&gt;prior = p;

    return OK;
}

void Caesar(DuLinkList *L, int i)
{
    if(i &gt; 0 )
    {
        do
        {
            (*L) = (*L)-&gt;next;
        }while( --i);
    }

    if(i &lt; 0 )
    {

        i=i-1;
        (*L)=(*L)-&gt;next;

        do
        {
            (*L)=(*L)-&gt;prior;
        }while(++i);

    }
}

int main()
{
    DuLinkList L;
    int i, n;

    InitLisk(&amp;L);
    printf(&quot;请输入一个整数: &quot;);
    scanf(&quot;%d&quot;, &amp;n);


    Caesar(&amp;L, n);

    for(i=0; i&lt;26; i++)
    {
        L = L-&gt;next;
        printf(&quot;%c&quot;, L-&gt;data);
    }

    return 0;
}
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构学习笔记-12]]></title>
      <url>http://cuikangyuan.github.io/2016/01/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-12/</url>
      <content type="html"><![CDATA[<h2 id="u9B54_u672F_u5E08_u53D1_u724C_u95EE_u9898"><a href="#u9B54_u672F_u5E08_u53D1_u724C_u95EE_u9898" class="headerlink" title="魔术师发牌问题"></a>魔术师发牌问题</h2><a id="more"></a>     
<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

#define CardNumber 13

typedef struct node
{
    int data;
    struct node *next;
}sqlist, *linklist;

linklist CreateLinkList()
{
    linklist head = NULL;
    linklist s, r;
    int i;

    r = head;

    for(i=1; i&lt;=CardNumber; i++)
    {
        s = (linklist)malloc(sizeof(sqlist));
        s-&gt;data = 0;

        if(head == NULL)
            head = s;
        else
            r-&gt;next = s;


        r = s;
    }

    r-&gt;next = head;

    return head;
}

void Magician(linklist head)
{
    linklist p;
    int j;
    int Countnumber = 2;

    p = head;
    p-&gt;data = 1;

    while(1)
    {
        for(j=0; j&lt;Countnumber; j++)
        {
            p = p-&gt;next;
            if(p-&gt;data != 0)
            {
                p-&gt;next;
                j--;
            }
        }

        if(p-&gt;data == 0)
        {
            p-&gt;data = Countnumber;
            Countnumber++;

            if(Countnumber == 14)
                break;
        }
    }
}


int main()
{
    linklist p;
    int i;

    p = CreateLinkList();
    Magician(p);

    for(i=0; i&lt;CardNumber; i++)
    {
        printf(&quot;%d &quot;, p-&gt;data);
        p = p-&gt;next;
    }

    return 0;
}
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构学习笔记-11]]></title>
      <url>http://cuikangyuan.github.io/2016/01/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-11/</url>
      <content type="html"><![CDATA[<h2 id="u5FAA_u73AF_u94FE_u8868_u5408_u5E76"><a href="#u5FAA_u73AF_u94FE_u8868_u5408_u5E76" class="headerlink" title="循环链表合并"></a>循环链表合并</h2><pre><code>//假设A， B为非空循环链表的尾指针
LinkList Connect(LinkList A, LinkList B)
{
    //保存A表的头结点位置
    LinkList p = A-&gt;next;

    //B表的开始结点链接到A表尾
    A-&gt;next = B-&gt;next-&gt;next;

    //释放B表头结点
    free(B-&gt;next);

    B-&gt;next = p;

    //返回新循环链表的尾指针
    return B; 

}
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构学习笔记-10]]></title>
      <url>http://cuikangyuan.github.io/2016/01/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-10/</url>
      <content type="html"><![CDATA[<h2 id="u5224_u65AD_u5355_u94FE_u8868_u4E2D_u662F_u5426_u6709_u73AF"><a href="#u5224_u65AD_u5355_u94FE_u8868_u4E2D_u662F_u5426_u6709_u73AF" class="headerlink" title="判断单链表中是否有环"></a>判断单链表中是否有环</h2><a id="more"></a> 
<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;

#define OK 1
#define ERROR 0
#define TRUE 1
#define FALSE 0


typedef int Status;
typedef int ElemType;

typedef struct Node
{
    ElemType data;
    struct Node *next;
}Node, *LinkList;


Status InitList(LinkList *L)
{
    *L = (LinkList)malloc(sizeof(Node));

    if(!(*L))
    {
        return ERROR;
    }

    (*L)-&gt;next = NULL;

    return OK;
}

void CreateListTail(LinkList *L, int n)
{
    LinkList p, r;
    int i;

    srand(time(0));/*初始化随机数种子*/

    *L = (LinkList)malloc(sizeof(Node));

    r = *L;/*r 指向尾部结点*/

    for(i=0; i&lt;n; i++)
    {
        p = (Node *)malloc(sizeof(Node));
        p-&gt;data = rand()%100 + 1;
        r-&gt;next = p;
        r = p;
    }

    r-&gt;next = (*L)-&gt;next-&gt;next-&gt;next;
}

//比较步数的方法
int HasLoop1(LinkList L)
{
    LinkList cur1 = L;
    int pos1 = 0;

    while(cur1)
    {
        LinkList cur2 = L;
        int pos2 = 0;
        while(cur2)
        {
            if(cur2 == cur1)
            {
                if(pos1 == pos2)
                {
                    break;
                }
                else
                {
                    printf(&quot;Loop is at     position %d \n&quot;, pos2);
                    return 1;
                }
            }

            cur2 = cur2-&gt;next;
            pos2++;
        }

        cur1 = cur1-&gt;next;
        pos1++;
    }
    return 0;
}

//快慢指针的方法
int HasLoop2(LinkList L)
{
    int step1 = 1;
    int step2 = 2;

    LinkList p = L;
    LinkList q = L;

    while(p!=NULL &amp;&amp; q!=NULL &amp;&amp; q-&gt;next!=NULL)
    {
        p = p-&gt;next;
        if(q-&gt;next != NULL)
            q = q-&gt;next-&gt;next;

        printf(&quot;p:%d, q:%d \n&quot;, p-&gt;data, q-&gt;data);

        if(p == q)
            return 1;
    }
    return 0;
}

int main()
{
    LinkList L;
    int i = InitList(&amp;L);

    CreateListTail(&amp;L, 6);

    HasLoop1(L);

    HasLoop2(L);

    return 0;

}
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构学习笔记-9]]></title>
      <url>http://cuikangyuan.github.io/2016/01/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-9/</url>
      <content type="html"><![CDATA[<h2 id="u7EA6_u745F_u592B_u73AF"><a href="#u7EA6_u745F_u592B_u73AF" class="headerlink" title="约瑟夫环"></a>约瑟夫环</h2><a id="more"></a> 
<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

typedef struct node
{
    int data;
    struct node *next;
}node;

node *create(int n)
{
    node *p = NULL, *head;
    head = (node *)malloc(sizeof(node));
    p = head;
    node *s;
    int i = 1;

    if(0 != n)
    {
        while(i &lt;= n)
        {
            s = (node *)malloc(sizeof(node));
            s-&gt;data = i++;
            p-&gt;next = s;
            p = s;
        }
        s-&gt;next = head-&gt;next;
    }
    free(head);

    return s-&gt;next;
}

int main()
{
    int n = 41;
    int m = 3;
    int i;
    node *p = create(n);
    node *temp;

    m %= n;

    while(p != p-&gt;next)
    {
        for(i=1; i&lt;m-1; i++)
        {
            p = p-&gt;next;
        }

        printf(&quot;%d-&gt;&quot;, p-&gt;next-&gt;data);
        temp = p-&gt;next;
        p-&gt;next = temp-&gt;next;

        free(temp);

        p = p-&gt;next;
    }


    printf(&quot;%d\n&quot;, p-&gt;data);

    return 0;
}
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构学习笔记-8]]></title>
      <url>http://cuikangyuan.github.io/2016/01/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-8/</url>
      <content type="html"><![CDATA[<h2 id="u5FAA_u73AF_u94FE_u8868"><a href="#u5FAA_u73AF_u94FE_u8868" class="headerlink" title="循环链表"></a>循环链表</h2><pre><code>/*链表存储结构的定义*/
typedef struct CLinkList
{
    int data;
    struct CLinkList *next;
}node;
</code></pre><a id="more"></a> 
<pre><code>/*初始化循环链表*/
void ds_init(node **pNode)
{
    int item;
    node *temp;
    node *target;

    printf(&quot;输入结点的值，输入0完成初始化\n&quot;);

    while(1)
    {
        scanf(&quot;%d&quot;, &amp;item);
        fflush(stdin);

        if(item == 0)
            return;

        if((*pNode) == NULL)
        {
            /*循环链表此时只有一个结点*/
            *pNode = (node*)malloc(sizeof(struct CLinkList));
            if(!(*pNode))
                exit(0);
            (*pNode)-&gt;data = item;
            (*pNode)-&gt;next = *pNode;
        }
        else
        {
            /*找到要插入元素的位置*/
            for(target=(*pNode);target-&gt;next!=(*pNode);target=target-&gt;next)
            ;
            /*生成一个新的结点*/
            temp = (node *)malloc(sizeof(struct CLinkList));

            if(!temp)
                exit(0);

            temp-&gt;data = item;
            temp-&gt;next = *pNode;
            target-&gt;next = temp;

        }
    }
}

/*插入结点*/
/*参数: 链表的第一个结点，插入的位置*/
void ds_insert(node **pNode, int i)
{
    node *temp;
    node *target;
    node *p;
    int item;
    int j=1;

    printf(&quot;输入要插入结点的值:&quot;);
    scanf(&quot;%d&quot;, &amp;item);

    if(i == 1)
    {
        //新插入的结点作为第一个结点
        temp = (node *)malloc(sizeof(strut CLinkList));

        if(!temp)
            exit(0);

        temp-&gt;data = item;

        //寻找最后一个结点
        for(target=(*pNode);target-&gt;next!=(*pNode);target=target-&gt;next)
            ;
        temp-&gt;next = (*pNode);
        target-&gt;next = temp;
        *pNode = temp;

    }
    else
    {
        target = *pNode;
        for(; j&lt;(i-1); ++j)
        {
            target = target-&gt;next;
        }
        temp = (node *)malloc(sizeof(struct CLinkList));

        if(!temp)
            exit(0);
        temp-&gt;data = item;
        p = target-&gt;next;
        target-&gt;next = temp;
        temp-&gt;next = p;

    }
}

/*删除结点*/
void ds_delete(node **pNode, int i)
{
    node *target;
    node *temp;

    int j = 1;

    if(i == 1)
    {
        //删除的是第一个结点

        //找到最后一个结点
        for(target=*pNode;target-&gt;next!=*pNode;target=target-&gt;next)
            ;
        temp = *pNode;
        *pNode = (*pNode)-&gt;next;
        target-&gt;next = *pNode;
        free(temp);

    }
    else
    {
        target = *pNode;

        for(; j&lt;i-1; ++j)
        {
            target = target-&gt;next;
        }

        temp = target-&gt;next;
        target-&gt;next = temp-&gt;next;
        free(temp);
    }
}

/*返回结点所在位置*/
int ds_search(node *pNode, int elem)
{
    node *target;
    int i = 1;

    for(target=pNode; target-&gt;data!=elem&amp;&amp;target-&gt;next!=pNode; ++i)
    {
        target = target-&gt;next;
    }

    //表中不存在该元素
    if(target-&gt;next == pNode)
        return -1;
    else
        return i;
}
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构学习笔记-7]]></title>
      <url>http://cuikangyuan.github.io/2016/01/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-7/</url>
      <content type="html"><![CDATA[<h2 id="u9762_u8BD5_u9898_u5B9E_u4F8B"><a href="#u9762_u8BD5_u9898_u5B9E_u4F8B" class="headerlink" title="面试题实例"></a>面试题实例</h2><a id="more"></a> 
<pre><code>//快速找到未知长度单链表的中间结点
Status FindMidNode(LinkList L, ElemType *e)
{

    LinkList search, mid;
    mid = search = L;

    while(search-&gt;next != NULL)
    {
        if(search-&gt;next-&gt;next != NULL)
        {
            search = search-&gt;next-&gt;next;

            mid = mid-&gt;next;
        }
        else
        {
            search = search-&gt;next;    
        }
    }

    *e = mid-&gt;data;

    return OK;             
}    
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构学习笔记-6]]></title>
      <url>http://cuikangyuan.github.io/2016/01/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-6/</url>
      <content type="html"><![CDATA[<h2 id="u9759_u6001_u94FE_u8868_u7684_u5220_u9664_u64CD_u4F5C"><a href="#u9759_u6001_u94FE_u8868_u7684_u5220_u9664_u64CD_u4F5C" class="headerlink" title="静态链表的删除操作"></a>静态链表的删除操作</h2><a id="more"></a> 
<pre><code>//将下标为k的空闲结点回收到备用链表
int Free_SLL(StaticLinkList space, int k)
{

    space[k].cur = space[0].cur;
    space[0].cur = k;             
}

/*删除在静态链表L中第i个元素*/
Status ListInsert(StaticLinkList L, int i)
{
    int j, k;

    k = MAX_SIZE - 1; //数组的最后一个元素下标

    if(i&lt;1 || i&gt;ListLength(L)+1)
    {
        retrun ERROR;
    }

    for(j=1; j&lt;=i-1; j++)
    {
        k = L[k].cur;
    }

    j = L[k].cur; //待释放下标
    L[k].cur = L[j].cur;//将释放的位置的前一个结点游标移动

    return OK;             
}

/*返回L中数据元素的个数*/
int ListLength(StaticLinkList L)
{
    int j = 0;
    int i = L[MAX_SIZE-1].cur;//真实存放元素的结点从下标1开始

    while(i)
    {
        i = L[i].cur;//游标移动
        j++;
    }

    return j;

}
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构学习笔记-5]]></title>
      <url>http://cuikangyuan.github.io/2016/01/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-5/</url>
      <content type="html"><![CDATA[<h2 id="u9759_u6001_u94FE_u8868_u7684_u63D2_u5165_u64CD_u4F5C_28C_u8BED_u8A00_u5B9E_u73B0_29"><a href="#u9759_u6001_u94FE_u8868_u7684_u63D2_u5165_u64CD_u4F5C_28C_u8BED_u8A00_u5B9E_u73B0_29" class="headerlink" title="静态链表的插入操作(C语言实现)"></a>静态链表的插入操作(C语言实现)</h2><a id="more"></a> 
<pre><code>//获得空闲分量的下标
int Malloc_SLL(StaticLinkList space)
{

    int i = space[0].cur;
    if(space[0].cur)
    {
        //更新备用分量
        space[0].cur = space[i].cur;
        return i;
    }             
}

/*在静态链表L中第i个元素之前插入新的数据元素e*/
Status ListInsert(StaticLinkList L, int i, ElemType e)
{
    int j, k, l;

    k = MAX_SIZE - 1; //数组的最后一个元素下标

    if(i&lt;1 || i&gt;ListLength(L)+1)
    {
        retrun ERROR;
    }

    j = Malloc_SLL(L);
    if(j)
    {
        L[j].data = e;
        for(l=1; l&lt;=i-1; l++)
        {
            k = L[k].cur;
        }
        L[j].cur = L[k].cur;
        L[k].cur = j;

        return OK;
    }

    return ERROR;             
}
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构学习笔记-4]]></title>
      <url>http://cuikangyuan.github.io/2016/01/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-4/</url>
      <content type="html"><![CDATA[<pre><code> typedef struct Node
{
    ElemType data;       //数据域
    struct Node* Next;   //存放后继结点地址
} Node;

typedef struct Node* LinkList
</code></pre><h2 id="u5355_u94FE_u8868_u6574_u8868_u5220_u9664_28C_u8BED_u8A00_u5B9E_u73B0_29"><a href="#u5355_u94FE_u8868_u6574_u8868_u5220_u9664_28C_u8BED_u8A00_u5B9E_u73B0_29" class="headerlink" title="单链表整表删除(C语言实现)"></a>单链表整表删除(C语言实现)</h2><a id="more"></a> 
<pre><code>void ClearList(LinkList *L)
{

    LinkList p, q;

    p = (*L)-&gt;next;

    while(p)
    {
        q = p-&gt;next;
        free(p);
        p = q;
    }
    (*L)-&gt;next = NULL;

    return OK;        
 }
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构学习笔记-3]]></title>
      <url>http://cuikangyuan.github.io/2016/01/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-3/</url>
      <content type="html"><![CDATA[<pre><code> typedef struct Node
{
    ElemType data;       //数据域
    struct Node* Next;   //存放后继结点地址
} Node;

typedef struct Node* LinkList
</code></pre><h2 id="u5934_u63D2_u6CD5_u5EFA_u7ACB_u5355_u94FE_u8868_28C_u8BED_u8A00_u5B9E_u73B0_29"><a href="#u5934_u63D2_u6CD5_u5EFA_u7ACB_u5355_u94FE_u8868_28C_u8BED_u8A00_u5B9E_u73B0_29" class="headerlink" title="头插法建立单链表(C语言实现)"></a>头插法建立单链表(C语言实现)</h2><a id="more"></a> 
<pre><code>void CreateListFromHead(LinkList *L, int n)
{

    LinkList p;
    int i;

    srand(time(0)); //初始化随机种子

    *L = (LinkList)malloc(sizeof(Node));
    (*L)-&gt;next = NULL;

    for(i=0; i&lt;n; i++)
    {
        p = (LinkList)malloc(sizeof(Node));
        p-&gt;data = rand()%100+1;
        p-&gt;next = (*L)-&gt;next;
        (*L)-&gt;next = p;
    }        
 }
</code></pre><h2 id="u5C3E_u63D2_u6CD5_u5EFA_u7ACB_u5355_u94FE_u8868_28C_u8BED_u8A00_u5B9E_u73B0_29"><a href="#u5C3E_u63D2_u6CD5_u5EFA_u7ACB_u5355_u94FE_u8868_28C_u8BED_u8A00_u5B9E_u73B0_29" class="headerlink" title="尾插法建立单链表(C语言实现)"></a>尾插法建立单链表(C语言实现)</h2><pre><code>void CreateListFromTail(LinkList *L, int n)
{

    LinkList p,r;
    int i;

    srand(time(0)); //初始化随机种子

    *L = (LinkList)malloc(sizeof(Node));
    r = *L

    for(i=0; i&lt;n; i++)
    {
        p = (LinkList)malloc(sizeof(Node));
        p-&gt;data = rand()%100+1;

        r-&gt;next = p;
        r = p;
    }

    r-&gt;next = NULL;        
 }
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构学习笔记-2]]></title>
      <url>http://cuikangyuan.github.io/2016/01/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2/</url>
      <content type="html"><![CDATA[<pre><code> typedef struct Node
{
    ElemType data;       //数据域
    struct Node* Next;   //存放后继结点地址
} Node;

typedef struct Node* LinkList
</code></pre><h2 id="u5355_u94FE_u8868_u63D2_u5165_28C_u8BED_u8A00_u5B9E_u73B0_29"><a href="#u5355_u94FE_u8868_u63D2_u5165_28C_u8BED_u8A00_u5B9E_u73B0_29" class="headerlink" title="单链表插入(C语言实现)"></a>单链表插入(C语言实现)</h2><a id="more"></a> 
<pre><code>Status ListInsert(LinkList L, int i, ElemType e)
{
    int j;
    LinkList p, s;

    p = L;
    j = 1;

    while(p &amp;&amp; j&lt;i)
    {
        p = p-&gt;Next;
        ++j;
    }

    if(!p || j&gt;i)
    {
        return ERROR;
    }

    s = (LinkList)malloc(sizeof(Node));
    s-&gt;data = e;

    s-&gt;next = p-&gt;next;
    p-&gt;next = s;

    return OK;        
 }
</code></pre><h2 id="u5355_u94FE_u8868_u5220_u9664_28C_u8BED_u8A00_u5B9E_u73B0_29"><a href="#u5355_u94FE_u8868_u5220_u9664_28C_u8BED_u8A00_u5B9E_u73B0_29" class="headerlink" title="单链表删除(C语言实现)"></a>单链表删除(C语言实现)</h2><pre><code>Status ListInsert(LinkList L, int i, ElemType *e)
{
    int j;
    LinkList p, q;

    p = L;
    j = 1;

    while(p &amp;&amp; j&lt;i)
    {
        p = p-&gt;Next;
        ++j;
    }

    if(!(p-&gt;next) || j&gt;i)
    {
        return ERROR;
    }

    q = p-&gt;next;
    p-&gt;next = q-&gt;next;


    *e = q-&gt;data;
    free(q);

    return OK;        
 }
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构学习笔记-1]]></title>
      <url>http://cuikangyuan.github.io/2016/01/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/</url>
      <content type="html"><![CDATA[<pre><code> typedef struct Node
{
    ElemType data;       //数据域
    struct Node* Next;   //存放后继结点地址
} Node;

typedef struct Node* LinkList
</code></pre><h2 id="u83B7_u53D6_u94FE_u8868_u5143_u7D20_u7B97_u6CD5_28C_u8BED_u8A00_u5B9E_u73B0_29"><a href="#u83B7_u53D6_u94FE_u8868_u5143_u7D20_u7B97_u6CD5_28C_u8BED_u8A00_u5B9E_u73B0_29" class="headerlink" title="获取链表元素算法(C语言实现)"></a>获取链表元素算法(C语言实现)</h2><a id="more"></a> 
<pre><code>Status GetElem(LinkList L, int i, ElemType *e)
{
    int j;
    LinkList p;

    p = L-&gt;Next
    j = 1;

    while(p &amp;&amp; j&lt;i)
    {
        p = p-&gt;Next;
        ++j;
    }

    if(!p || j&gt;i)
    {
        return ERROR;
    }
    *e = p-&gt;data;

    return OK;        
 }
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo搭建博客时的备忘]]></title>
      <url>http://cuikangyuan.github.io/2016/01/04/Hexo%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      <content type="html"><![CDATA[<p>在用Hexo+Github搭建个人博客时，注意在配置Deploy时要使用SSH地址而不是Https，否则可能无法上传到Github。<br>推荐以下教程：<a href="http://jingyan.baidu.com/article/d8072ac47aca0fec95cefd2d.html" target="_blank" rel="external">Click Here</a></p>
]]></content>
    </entry>
    
  
  
</search>
